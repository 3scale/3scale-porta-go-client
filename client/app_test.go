package client

import (
	"fmt"
	"net/http"
	"testing"

	"github.com/3scale/3scale-porta-go-client/fake"
)

func TestCreateApp(t *testing.T) {
	const (
		credential  = "123"
		accountID   = "321"
		planID      = "abc"
		name        = "test"
	)

	inputs := []struct {
		name       string
		returnErr  bool
		expectCode int
		expectErr  string
	}{
		{
			name:      "Test app creation fail",
			returnErr: true,
			expectErr: "error calling 3scale system - reason: Your access token does not have the correct permissions - code: 403",
		},
		{
			name: "Test app creation success",
		},
	}

	for _, input := range inputs {
		httpClient := NewTestClient(func(req *http.Request) *http.Response {
			if req.Method != http.MethodPost {
				t.Fatalf("wrong helper called for create app api")
			}

			if req.URL.Path != "/admin/api/accounts/321/applications.xml" {
				t.Fatalf("wrong url generated by CreateApp function")
			}

			if input.returnErr {
				return fake.CreateAppError()
			}
			return fake.CreateAppSuccess(input.name)
		})

		c := NewThreeScale(NewTestAdminPortal(t), httpClient)

		t.Run(input.name, func(t *testing.T) {
			a, b := c.CreateApp(credential, accountID, planID, name, input.name)
			if input.returnErr {
				e := b.(ApiErr)
				if e.Code() != http.StatusForbidden {
					t.Fatal("unexpected code returned in error")
				}
				fmt.Println(b.Error())
				fmt.Println("Test")
				if b.Error() != input.expectErr {
					fmt.Println(b.Error())
					t.Fatal("unexpected error message")
				}
				return
			}

			if a.Error != "" {
				t.Fatal("expected error to be empty")
			}
			if a.Description != input.name {
				t.Fatal("xml has not decoded correctly")
			}
		})
	}
}
